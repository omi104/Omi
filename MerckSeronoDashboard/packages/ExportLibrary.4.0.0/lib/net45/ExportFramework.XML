<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExportFramework</name>
    </assembly>
    <members>
        <member name="T:ExportFramework.AsposeLicense">
            <summary>
            Set Aspose Licenses
            </summary>
        </member>
        <member name="M:ExportFramework.AsposeLicense.SetExcelLicense">
            <summary>
            Setting Excel License. First it will find 'Aspose.Cells.lic' file in dll location, if found set that license otherwise set the embedded license
            </summary>
        </member>
        <member name="M:ExportFramework.AsposeLicense.SetPowerpointLicense">
            <summary>
            Setting Powerpoint License. First it will find 'Aspose.Slides.lic' file in dll location, if found set that license otherwise set the embedded license
            </summary>
        </member>
        <member name="T:ExportFramework.Common.DatabarConfig">
            <summary>
            Configuration for Databar
            </summary>
        </member>
        <member name="M:ExportFramework.Common.DatabarConfig.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExportFramework.Common.DatabarConfig.RangeText">
            <summary>
            Range Text like B5:B10
            </summary>
        </member>
        <member name="P:ExportFramework.Common.DatabarConfig.PositiveColor">
            <summary>
            Hex color without #
            </summary>
        </member>
        <member name="P:ExportFramework.Common.DatabarConfig.NegativeColor">
            <summary>
            Hex color without #
            </summary>
        </member>
        <member name="P:ExportFramework.Common.DatabarConfig.ShowValue">
            <summary>
            If value will be shown with databar
            </summary>
        </member>
        <member name="P:ExportFramework.Common.DatabarConfig.ShowGradiantColor">
            <summary>
            If databar color will be gradiant or not
            </summary>
        </member>
        <member name="P:ExportFramework.Common.DatabarConfig.DatabarAxisPosition">
            <summary>
            Databar Axis Position
            </summary>
        </member>
        <member name="T:ExportFramework.Common.Formatting.DefaultColumnFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExportFramework.Common.Formatting.IFormatter">
            <summary>
            Column or Row Formatter
            </summary>
        </member>
        <member name="M:ExportFramework.Common.Formatting.IFormatter.ApplyFormatting(Aspose.Cells.Worksheet,System.String)">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <param name="rangeText"></param>
        </member>
        <member name="P:ExportFramework.Common.Formatting.IFormatter.Id">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExportFramework.Common.Formatting.DefaultColumnFormatter.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ExportFramework.Common.Formatting.DefaultColumnFormatter.ApplyFormatting(Aspose.Cells.Worksheet,System.String)">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <param name="rangeText"></param>
        </member>
        <member name="P:ExportFramework.Common.Formatting.DefaultColumnFormatter.HorizontalAlignmetn">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExportFramework.Common.Formatting.DefaultColumnFormatter.VerticalAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExportFramework.Common.Formatting.DefaultColumnFormatter.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExportFramework.Common.Formatting.DefaultColumnFormatter.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExportFramework.Common.Formatting.DefaultRowFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExportFramework.Common.Formatting.DefaultRowFormatter.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="id">Row or Column Id</param>
        </member>
        <member name="M:ExportFramework.Common.Formatting.DefaultRowFormatter.ApplyFormatting(Aspose.Cells.Worksheet,System.String)">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <param name="rangeText"></param>
        </member>
        <member name="P:ExportFramework.Common.Formatting.DefaultRowFormatter.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExportFramework.Common.Formatting.DefaultRowFormatter.BorderColor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExportFramework.Common.XCell">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExportFramework.Common.XCell.Write(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Write Data in a cell
            </summary>
            <param name="sheet"></param>
            <param name="rowNo">Row No</param>
            <param name="colNo">Column No</param>
        </member>
        <member name="P:ExportFramework.Common.XCell.Data">
            <summary>
            Data to write
            </summary>
        </member>
        <member name="T:ExportFramework.Common.XRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExportFramework.Common.XRow.Write(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Write a row in the sheet
            </summary>
            <param name="sheet"></param>
            <param name="rowNo">Row Number</param>
            <param name="colNo">Starting Column No</param>
        </member>
        <member name="P:ExportFramework.Common.XRow.Cells">
            <summary>
            List of Cell for this row
            </summary>
        </member>
        <member name="T:ExportFramework.Common.SparklineConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExportFramework.Common.SparklineConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExportFramework.Common.SparklineConfig.StartSparklineCellAddress">
            <summary>
            Top cell address of the sparkline chart set, where the first sparkline chart will be drawn
            </summary>
        </member>
        <member name="P:ExportFramework.Common.SparklineConfig.StartDataCellAddress">
            <summary>
            Top left cell address of the sparkline chart's data set, where the source data will be written
            </summary>
        </member>
        <member name="P:ExportFramework.Common.SparklineConfig.Values">
            <summary>
            List of sparkline source data. Inner list contains list of numeric value for each sparkline chart
            </summary>
        </member>
        <member name="P:ExportFramework.Common.SparklineConfig.Color">
            <summary>
            Hex color of the chart
            </summary>
        </member>
        <member name="T:ExportFramework.Common.XTable">
            <summary>
            Type for export table
            </summary>
        </member>
        <member name="M:ExportFramework.Common.XTable.Write(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Write the table in a sheet
            </summary>
        </member>
        <member name="P:ExportFramework.Common.XTable.Rows">
            <summary>
            List of Rows in this Table
            </summary>
        </member>
        <member name="P:ExportFramework.Common.XTable.ColumnFormatters">
            <summary>
            List of Column Formatter
            </summary>
        </member>
        <member name="P:ExportFramework.Common.XTable.RowFormatters">
            <summary>
            List of Row Formatter
            </summary>
        </member>
        <member name="T:ExportFramework.Excel.ChartExtensions">
            <summary>
            Extension methods for Excel Chart
            </summary>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ApplyChartSeriesColor(Aspose.Cells.Charts.Chart,Aspose.Cells.Worksheet,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Apply chart series color for multi series chart
            </summary>
            <param name="chart"></param>
            <param name="dataSheet">The sheet, where chart data source has been set</param>
            <param name="colorMapping">Color mapping for series. Key: Series Name, Value: Hex Color Code</param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ApplyChartSeriesColor(Aspose.Cells.Charts.Chart,Aspose.Cells.Worksheet,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Apply chart series color for multi series chart
            </summary>
            <param name="chart"></param>
            <param name="dataSheet">The sheet, where chart data source has been set</param>
            <param name="colorMapping">Color mapping for series. Key: Series Index, Value: Hex Color Code</param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ApplyChartSeriesPointColor(Aspose.Cells.Charts.Chart,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.String}})">
            <summary>
            Apply chart series point (individual item) color for single series chart
            </summary>
            <param name="chart"></param>
            <param name="colorMapping">Color mapping for series point. Key: Point Index, Value: Hex Color Code</param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ClearBlankSeries(Aspose.Cells.Charts.Chart,Aspose.Cells.Worksheet)">
            <summary>
            Clears the blank series of chart.
            </summary>
            <param name="chart"></param>
            <param name="dataSheet">The sheet, where chart data source has been set</param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ClearSeriesBlankPoints(Aspose.Cells.Charts.Chart,Aspose.Cells.Worksheet,System.String)">
            <summary>
            Clears the blank data points of chart serieses.
            </summary>
            <param name="chart"></param>
            <param name="dataSheet">The sheet, where chart data source has been set</param>
            <param name="seriesDataIn"></param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ApplyYAxisScale(Aspose.Cells.Charts.Chart,System.Double,System.Double,System.Boolean)">
            <summary>
            Set primary Y-Axis Maximum and Minimum value
            </summary>
            <param name="chart"></param>
            <param name="maxValue">Primary Y-Axis maximum value</param>
            <param name="minValue">Primary Y-Axis minimum value</param>
            <param name="isSecondary">True if Secondary Y-Axis</param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.ApplyYAxisNumberFormat(Aspose.Cells.Charts.Chart,System.String,System.Boolean)">
            <summary>
            Apply Primary Y-Axis number format
            </summary>
            <param name="chart"></param>
            <param name="numberFormat">Custom number format</param>
            <param name="isSecondary">True if Secondary Y-Axis</param>
        </member>
        <member name="M:ExportFramework.Excel.ChartExtensions.SetPositionAndSize(Aspose.Cells.Charts.Chart,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set Chart Position and Size
            </summary>
            <param name="chart"></param>
            <param name="left">Chart Left Position in Inch</param>
            <param name="top">Chart Top Position in Inch</param>
            <param name="width">Chart Width in Inch, negetive value does not apply</param>
            <param name="height">Chart Height in inch, negetive value does not apply</param>
        </member>
        <member name="T:ExportFramework.Excel.WorkbookExtension">
            <summary>
            Extension methods for workbook
            </summary>
        </member>
        <member name="M:ExportFramework.Excel.WorkbookExtension.RenameSheet(Aspose.Cells.Workbook,System.String,System.String)">
            <summary>
            Rename a worksheet
            </summary>
            <param name="workbook"></param>
            <param name="oldName">Current worksheet name</param>
            <param name="newName">New worksheet name</param>
        </member>
        <member name="M:ExportFramework.Excel.WorkbookExtension.Merge(Aspose.Cells.Workbook,System.Byte[])">
            <summary>
            Merge workbooks
            </summary>
            <param name="workbook">Merge with this workbook</param>
            <param name="fileData">Workbook file data to merge</param>
        </member>
        <member name="M:ExportFramework.Excel.WorkbookExtension.GetWorksheetImage(Aspose.Cells.Workbook,System.String,System.Int32)">
            <summary>
            Get Worksheet Image
            </summary>
            <param name="workbook"></param>
            <param name="sheetName">Sheet Name, which image will be taken</param>
            <param name="pageIndex">Image taken of this page index</param>
            <returns>Returns an Image</returns>
        </member>
        <member name="M:ExportFramework.Excel.WorkbookExtension.GetExcelData(Aspose.Cells.Workbook)">
            <summary>
            Get Workbook data as byte array
            </summary>
            <param name="workbook"></param>
            <returns>Byte array of Workbook</returns>
        </member>
        <member name="M:ExportFramework.Excel.WorkbookExtension.GetPdfData(Aspose.Cells.Workbook)">
            <summary>
            Get Workbook data as byte array of pdf format
            </summary>
            <param name="workbook"></param>
            <returns>Byte array of pdf</returns>
        </member>
        <member name="T:ExportFramework.Excel.SheetExtension">
            <summary>
            Extension methods of worksheet
            </summary>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.WriteTable(Aspose.Cells.Worksheet,ExportFramework.Common.XTable,System.String)">
            <summary>
            Write tabular data
            </summary>
            <param name="sheet"></param>
            <param name="table"></param>
            <param name="cellAddress"></param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.WriteInCell(Aspose.Cells.Worksheet,System.Object,System.Int32,System.Int32)">
            <summary>
            Write data in a cell
            </summary>
            <param name="sheet"></param>
            <param name="data">data to write</param>
            <param name="rowNo">Row number</param>
            <param name="columnNo">Column number</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.WriteText(Aspose.Cells.Worksheet,System.Object,System.String)">
            <summary>
            Write text in a cell
            </summary>
            <param name="sheet"></param>
            <param name="data">data to write</param>
            <param name="cellAddress">Cell Address, like B1</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.CopyRangeTo(Aspose.Cells.Worksheet,System.String,Aspose.Cells.Worksheet,System.String,System.Boolean)">
            <summary>
            Copy a range of cells to a destination sheet
            </summary>
            <param name="sheet"></param>
            <param name="rangeText">Source range text, like A1:C1</param>
            <param name="destSheet">Destination sheet where the copied cells will be paste</param>
            <param name="destRangeText">Source range text, like A1:C1, or just start cell of the range, like A1</param>
            <param name="applyCellWidthHeight">To set source cells width/height to destination, pass true</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.ApplyDataBar(Aspose.Cells.Worksheet,ExportFramework.Common.DatabarConfig)">
            <summary>
            Apply Excel Databar, requires Excel 2010
            </summary>
            <param name="sheet"></param>
            <param name="databarConfig">Databar configuration</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.ApplyNumberFormat(Aspose.Cells.Worksheet,System.String,System.Int32[])">
            <summary>
            Apply custom number format in columns
            </summary>
            <param name="sheet"></param>
            <param name="format">Custom number format</param>
            <param name="columnNos">Array of column number</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.ApplyNumberFormat(Aspose.Cells.Worksheet,System.String,System.String)">
            <summary>
            Apply custom number format in a range
            </summary>
            <param name="sheet"></param>
            <param name="rangeText">Range text like B2:C10</param>
            <param name="format">Custom number format</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.DeleteRows(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Delete a range of rows from worksheet
            </summary>
            <param name="sheet"></param>
            <param name="startRowNo">Start Row number</param>
            <param name="length">Number of rows to delete</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.DeleteColumns(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Delete a range of columns from worksheet
            </summary>
            <param name="sheet"></param>
            <param name="startColumnNo">Start Column number</param>
            <param name="length">Number of columns to delete</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.HideRows(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Hide a range of rows from worksheet
            </summary>
            <param name="sheet"></param>
            <param name="startRowNo">Start Ro number</param>
            <param name="length">Number of rows to hide</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.HideColumns(Aspose.Cells.Worksheet,System.Int32,System.Int32)">
            <summary>
            Hide a range of columns from worksheet
            </summary>
            <param name="sheet"></param>
            <param name="startColumnNo">Start Column number</param>
            <param name="length">Number of columns to hide</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.SetupPrintArea(Aspose.Cells.Worksheet,System.String)">
            <summary>
            Set a print of area
            </summary>
            <param name="sheet"></param>
            <param name="rangeText">Range text, like A1:E20</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.InsertPicture(Aspose.Cells.Worksheet,System.Byte[],System.String)">
            <summary>
            Insert picture and place at specified cell's top left position
            </summary>
            <param name="sheet"></param>
            <param name="img">Binary data of the image</param>
            <param name="cellAddress">Cell Address where the picture will be placed at</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.ApplySparkline(Aspose.Cells.Worksheet,ExportFramework.Common.SparklineConfig,Aspose.Cells.Charts.SparklineType)">
            <summary>
            Apply sparkline chart, Requires Excel 2010
            </summary>
            <param name="sheet"></param>
            <param name="sparklineConfig">Sparkline configuration and data</param>
            <param name="sparklineType">Type of sparkline</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.WriteChart(Aspose.Cells.Worksheet,System.String,ExportFramework.Common.XTable,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Write Chart Data, Clear chart blank series and apply chart series color
            </summary>
            <param name="sheet"></param>
            <param name="chartId">Chart Id</param>
            <param name="table">Data to write</param>
            <param name="cellAddress">Cell Address from where the data will be written</param>
            <param name="colorMapping">Color dictionary for the series</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.SetMargin(Aspose.Cells.Worksheet,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set Sheet margin for print
            </summary>
            <param name="sheet"></param>
            <param name="topMargin">Top margin in Inch</param>
            <param name="rightMargin">Right margin in Inch</param>
            <param name="bottomMargin">Bottom margin in Inch</param>
            <param name="leftMargin">Left margin in Inch</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.DeleteCharts(Aspose.Cells.Worksheet,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete charts except listed charts
            </summary>
            <param name="sheet"></param>
            <param name="chartIds">Chart Ids, which will not be deleted.</param>
        </member>
        <member name="M:ExportFramework.Excel.SheetExtension.ApplyRangeFormatting(Aspose.Cells.Worksheet,ExportFramework.Common.Formatting.IFormatter,System.String)">
            <summary>
            Apply formatting/Style to a range of area
            </summary>
            <param name="sheet"></param>
            <param name="formatter">An IFormatter</param>
            <param name="rangeText">Range Text, where formatting will be applied</param>
        </member>
        <member name="T:ExportFramework.ExportHelper">
            <summary>
            Some helper functions for export
            </summary>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetRowNumber(System.String)">
            <summary>
            Get the row number from cell position
            </summary>
            <param name="cellPosition">Example: C5 returns 5</param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetColumnName(System.String)">
            <summary>
            Returns the column name
            </summary>
            <param name="cellPosition">Example: C5 returns C</param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetColumnName(System.Int32)">
            <summary>
            Returns Column Name
            </summary>
            <param name="columnNo">Example: 27 returns AA</param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetColumnNumber(System.String)">
            <summary>
            Returns Column Number calculated from column name.
            </summary>
            <param name="cellPosition">Example: AA1 returns 27</param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetWorkbook(System.String)">
            <summary>
            Get Workbook template
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.GetPresentation(System.String)">
            <summary>
            Get PowerpointEx template
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.ConvertFromXml(System.String)">
            <summary>
            Converts Xml to XTable
            </summary>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.MergeWorkbooks(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Merge Excel workbooks together and return merged Workbook
            </summary>
            <param name="exportDataList">List of Workbook data</param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.ExportHelper.MergePowerpoints(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Merge Powerpoint files together and return merged Powerpoint
            </summary>
            <param name="exportDataList">List of Powerpoint data</param>
            <returns></returns>
        </member>
        <member name="T:ExportFramework.Powerpoint.PresentationExExtensions">
            <summary>
            Extension methods for powerpoint
            </summary>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.GetShape(Aspose.Slides.Pptx.PresentationEx,System.String)">
            <summary>
            Get ShapeEx
            </summary>
            <param name="pptx"></param>
            <param name="shapeId">ShapeName of the Shape</param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.WriteTextInShape(Aspose.Slides.Pptx.PresentationEx,System.String,System.String)">
            <summary>
            Write text in a Shape (like text box shape)
            </summary>
            <param name="pptx"></param>
            <param name="shapeId">Name of the Shape</param>
            <param name="text">The text, which will be written in the Shape</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.GetExcelWorkbook(Aspose.Slides.Pptx.PresentationEx,System.String)">
            <summary>
            Get Excel Object from Embedded Excel Object in Powerpoint
            </summary>
            <param name="pptx"></param>
            <param name="shapeId">Excel Object Name</param>
            <returns>Workbook object</returns>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.SetExcelWorkbook(Aspose.Slides.Pptx.PresentationEx,System.String,Aspose.Cells.Workbook,System.Single,System.Single)">
            <summary>
            Set Excel Workbook in Powerpoint Excel Ole Object
            </summary>
            <param name="pptx"></param>
            <param name="shapeId">Excel Object Name</param>
            <param name="workbook">Workbook to embed</param>
            <param name="width">Width of the Shape in Inch, neg value will not change the width</param>
            <param name="height">Height of the Shape in Inch, neg value will not change the height</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.SetExcelWorkbook(Aspose.Slides.Pptx.PresentationEx,System.String,Aspose.Cells.Workbook)">
            <summary>
            Set Excel Workbook in Powerpoint Excel Ole Object, Height of Shape will grow automatically
            </summary>
            <param name="pptx"></param>
            <param name="shapeId">Excel Object Name</param>
            <param name="excel">Workbook to embed</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.GetPowerpointData(Aspose.Slides.Pptx.PresentationEx)">
            <summary>
            Get byte array of the powerpoint
            </summary>
            <param name="pptx"></param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.GetPdfData(Aspose.Slides.Pptx.PresentationEx)">
            <summary>
            Get byte array of powerpoint as pdf format
            </summary>
            <param name="pptx"></param>
            <returns></returns>
        </member>
        <member name="M:ExportFramework.Powerpoint.PresentationExExtensions.Merge(Aspose.Slides.Pptx.PresentationEx,System.Byte[])">
            <summary>
            Merge powerpoint
            </summary>
            <param name="pptx"></param>
            <param name="fileData"></param>
        </member>
        <member name="T:ExportFramework.Powerpoint.ShapeExtensions">
            <summary>
            Extension methods for ShapeEx
            </summary>
        </member>
        <member name="M:ExportFramework.Powerpoint.ShapeExtensions.SetShapeSizeAndPosition(Aspose.Slides.Pptx.ShapeEx,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set Shape Size and Position
            </summary>
            <param name="shape"></param>
            <param name="top">Shape Top position in Inch</param>
            <param name="left">Shape Left position in Inch</param>
            <param name="width">Shape Width in Inch, negetive value does not apply</param>
            <param name="height">Shape Height in Inch, negetive value does not apply</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.ShapeExtensions.SetShapeSize(Aspose.Slides.Pptx.ShapeEx,System.Single,System.Single)">
            <summary>
            Set shape size
            </summary>
            <param name="shape"></param>
            <param name="width">Shape width in Inch</param>
            <param name="height">Shape height in Inch</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.ShapeExtensions.WriteText(Aspose.Slides.Pptx.ShapeEx,System.String)">
            <summary>
            Write text in a shape
            </summary>
            <param name="shape"></param>
            <param name="data">Text to write</param>
        </member>
        <member name="T:ExportFramework.Powerpoint.SlideExtensions">
            <summary>
            Extension methods for slide
            </summary>
        </member>
        <member name="M:ExportFramework.Powerpoint.SlideExtensions.EmbedExcelWorkbook(Aspose.Slides.Pptx.SlideEx,Aspose.Cells.Workbook,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Embed workbook in a slide
            </summary>
            <param name="slide"></param>
            <param name="workbook">Workbook to embed</param>
            <param name="left">left position in Inch</param>
            <param name="top">top position in Inch</param>
            <param name="width">width in Inch</param>
            <param name="height">height in Inch</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.SlideExtensions.DeleteShapes(Aspose.Slides.Pptx.SlideEx,System.String)">
            <summary>
            Delete a shape from slide
            </summary>
            <param name="slide"></param>
            <param name="shapeId">Shape Id to delete</param>
        </member>
        <member name="M:ExportFramework.Powerpoint.SlideExtensions.GetShape(Aspose.Slides.Pptx.SlideEx,System.String)">
            <summary>
            Get Shape from a slide
            </summary>
            <param name="slide"></param>
            <param name="shapeId">Name of the Shape</param>
            <returns></returns>
        </member>
        <member name="T:ExportFramework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExportFramework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExportFramework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ExportFramework.Properties.Resources.Aspose_Cells">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:ExportFramework.Properties.Resources.Aspose_Slides">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:ExportFramework.Excel.XTableFactory`2">
            <summary>
            Convert CubeData to XTable
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TXTable"></typeparam>
        </member>
        <member name="M:ExportFramework.Excel.XTableFactory`2.#ctor(`0,System.Collections.Generic.List{ExportFramework.Common.Formatting.IFormatter},System.Collections.Generic.List{ExportFramework.Common.Formatting.IFormatter})">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="columnFormattings">List of Column Formatter</param>
            <param name="rowFormattings">List Row Formatter</param>
        </member>
        <member name="M:ExportFramework.Excel.XTableFactory`2.GetXTable">
            <summary>
            Generate XTable
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
